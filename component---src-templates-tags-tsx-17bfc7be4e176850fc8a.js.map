{"version":3,"sources":["webpack:///./src/templates/tags.tsx"],"names":["Tags","props","tag","pageContext","data","allMarkdownRemark","edges","totalCount","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","config","title","name","content","description","property","siteUrl","pathContext","slug","facebook","twitter","split","className","SiteHeader","outer","image","style","backgroundImage","childImageSharp","fluid","src","inner","isHome","SiteMain","PostFeed","PostFeedRaise","map","key","fields","post","pageQuery"],"mappings":"+PAyHeA,UApEyC,SAAAC,GACtD,IAAMC,EAAMD,EAAME,YAAYD,IADiC,EAEjCD,EAAMG,KAAKC,kBAAjCC,EAFuD,EAEvDA,MAAOC,EAFgD,EAEhDA,WACTC,EAAUP,EAAMG,KAAKK,WAAWH,MAAMI,KAC1C,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,GAAGC,gBAAkBZ,EAAIY,gBAGvC,OACE,cAAC,IAAD,KACE,cAAC,IAAD,KACE,sBAAMC,KAAMC,IAAOD,OACnB,2BACGb,EADH,MACWc,IAAOC,OAElB,sBAAMC,KAAK,cAAcC,QAASX,GAAWA,EAAQI,KAAOJ,EAAQI,KAAKQ,YAAc,KACvF,sBAAMC,SAAS,eAAeF,QAASH,IAAOC,QAC9C,sBAAMI,SAAS,UAAUF,QAAQ,YACjC,sBAAME,SAAS,WAAWF,QAAYjB,EAAL,MAAcc,IAAOC,QACtD,sBAAMI,SAAS,SAASF,QAASH,IAAOM,QAAUrB,EAAMsB,YAAYC,OACpE,sBAAMH,SAAS,oBAAoBF,QAASH,IAAOS,WACnD,sBAAMP,KAAK,eAAeC,QAAQ,wBAClC,sBAAMD,KAAK,gBAAgBC,QAAYjB,EAAL,MAAcc,IAAOC,QACvD,sBAAMC,KAAK,cAAcC,QAASH,IAAOM,QAAUrB,EAAMsB,YAAYC,OACrE,sBAAMN,KAAK,eAAeC,QAAO,IAAMH,IAAOU,QAAQC,MAAM,wBAAwB,MAEtF,cAAC,IAAD,KACE,wBACEC,UAAcC,IAAL,IAAmBC,IAAnB,KAA4BtB,GAAWA,EAAQI,KAAKmB,MAAQ,GAAK,YAC1EC,MAAO,CACLC,gBACEzB,GAAWA,EAAQI,KAAKmB,MAAxB,QACYvB,EAAQI,KAAKmB,MAAMG,gBAAgBC,MAAMC,IADrD,KAEI,KAGR,qBAAKR,UAAS,GAAKS,KACjB,cAAC,IAAD,CAASC,QAAQ,IACjB,cAAC,IAAD,KACE,cAAC,IAAD,KAAYpC,GACZ,cAAC,IAAD,KACGM,GAAWA,EAAQI,KAAKQ,YACvBZ,EAAQI,KAAKQ,YAEb,mDACmBb,EAAa,GAAQA,EAArB,SACD,IAAfA,GAAA,SACe,IAAfA,GAAA,gBAOb,sBAAMM,GAAG,YAAYe,UAAcW,IAAL,IAAiBT,KAC7C,qBAAKF,UAAS,GAAKS,KACjB,qBAAKT,UAAcY,IAAL,IAAiBC,KAC5BnC,EAAMoC,IAAI,gBAAG9B,EAAH,EAAGA,KAAH,OACT,cAAC,IAAD,CAAU+B,IAAK/B,EAAKgC,OAAOpB,KAAMqB,KAAMjC,SAK/C,cAAC,IAAD,SAQD,IAAMkC,EAAY","file":"component---src-templates-tags-tsx-17bfc7be4e176850fc8a.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport Helmet from 'react-helmet';\nimport config from '../website-config';\n\ninterface TagTemplateProps {\n  pathContext: {\n    slug: string;\n  };\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: {\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              fluid: any;\n            };\n          };\n        };\n      }[];\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: {\n        node: PageContext;\n      }[];\n    };\n  };\n}\n\nconst Tags: React.FunctionComponent<TagTemplateProps> = props => {\n  const tag = props.pageContext.tag;\n  const { edges, totalCount } = props.data.allMarkdownRemark;\n  const tagData = props.data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={tagData && tagData.node ? tagData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + props.pathContext.slug} />\n        <meta property=\"article:publisher\" content={config.facebook} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + props.pathContext.slug} />\n        <meta name=\"twitter:site\" content={`@${config.twitter.split('https://twitter.com/')[0]}`} />\n      </Helmet>\n      <Wrapper>\n        <header\n          className={`${SiteHeader} ${outer} ${tagData && tagData.node.image ? '' : 'no-cover'}`}\n          style={{\n            backgroundImage:\n              tagData && tagData.node.image\n                ? `url('${tagData.node.image.childImageSharp.fluid.src}')`\n                : '',\n          }}\n        >\n          <div className={`${inner}`}>\n            <SiteNav isHome={false} />\n            <SiteHeaderContent>\n              <SiteTitle>{tag}</SiteTitle>\n              <SiteDescription>\n                {tagData && tagData.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && `1 post`}\n                    {totalCount === 0 && `No posts`}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </header>\n        <main id=\"site-main\" className={`${SiteMain} ${outer}`}>\n          <div className={`${inner}`}>\n            <div className={`${PostFeed} ${PostFeedRaise}`}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            date\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 100) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}